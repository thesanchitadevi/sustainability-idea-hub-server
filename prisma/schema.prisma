// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output        = "../generated/prisma"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  MEMBERS
  ADMIN
}

enum UserStatus {
  ACTIVE
  BLOCKED
  DELETED
}

enum paymentStatus {
  PENDING
  FAILED
  PAID
}

enum IdeaStatus {
  UNDER_REVIEW
  APPROVED
  REJECT
  DRAFT
}

enum VoteType {
  UP_VOTE
  DOWN_VOTE
}

enum IdeaCategory {
  ENERGY
  WASTE
  TRANSPORTATION
}

model User {
  id            String     @id @default(uuid())
  email         String     @unique
  name          String
  password      String
  profile_image String
  role          UserRole   @default(MEMBERS)
  status        UserStatus @default(ACTIVE)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  ideas    Idea[]
  comments Comment[]
  payments Payment[]
  votes    Vote[]

  @@map("users")
}

model Idea {
  id                String       @id @default(uuid())
  user_id           String
  title             String
  problem_statement String
  proposed_solution String
  description       String
  isPaid            Boolean
  status            IdeaStatus
  isPublished       Boolean
  category          IdeaCategory
  rejectionFeedback String?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  user     User         @relation(fields: [user_id], references: [id])
  payments Payment[]
  comments Comment[]
  images   IdeaImages[]
  votes    Vote[]

  @@map("ideas")
}

model Payment {
  payment_id String        @id @default(uuid())
  UserId     String
  IdeaId     String
  amount     Int
  status     paymentStatus
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  user User @relation(fields: [UserId], references: [id])
  idea Idea @relation(fields: [IdeaId], references: [id])

  @@map("payments")
}

model Comment {
  id        String   @id @default(uuid())
  user_id   String
  idea_id   String
  parent_id String?
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User      @relation(fields: [user_id], references: [id])
  idea    Idea      @relation(fields: [idea_id], references: [id])
  parent  Comment?  @relation("CommentReplies", fields: [parent_id], references: [id])
  replies Comment[] @relation("CommentReplies")

  @@map("comments")
}

model Vote {
  id        String   @id @default(uuid())
  user_id   String
  idea_id   String
  vote_type VoteType
  createdAt DateTime @default(now())

  user User @relation(fields: [user_id], references: [id])
  idea Idea @relation(fields: [idea_id], references: [id])

  @@map("votes")
}

model IdeaImages {
  id        String   @id @default(uuid())
  idea_id   String
  imageUrl  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  idea Idea @relation(fields: [idea_id], references: [id])

  @@map("idea_images")
}
